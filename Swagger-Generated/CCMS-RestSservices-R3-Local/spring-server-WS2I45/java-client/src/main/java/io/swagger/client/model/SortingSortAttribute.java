/*
 * WS2I45
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2019-10-23 16:18:44.785
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * SortingSortAttribute
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-12-08T15:22:33.923Z")
public class SortingSortAttribute {
  @SerializedName("name")
  private String name = null;

  /**
   * Gets or Sets sortType
   */
  @JsonAdapter(SortTypeEnum.Adapter.class)
  public enum SortTypeEnum {
    ASC("ASC"),
    
    DESC("DESC");

    private String value;

    SortTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SortTypeEnum fromValue(String text) {
      for (SortTypeEnum b : SortTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<SortTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SortTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SortTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SortTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("sortType")
  private SortTypeEnum sortType = null;

  @SerializedName("order")
  private String order = null;

  public SortingSortAttribute name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(required = true, value = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public SortingSortAttribute sortType(SortTypeEnum sortType) {
    this.sortType = sortType;
    return this;
  }

   /**
   * Get sortType
   * @return sortType
  **/
  @ApiModelProperty(required = true, value = "")
  public SortTypeEnum getSortType() {
    return sortType;
  }

  public void setSortType(SortTypeEnum sortType) {
    this.sortType = sortType;
  }

  public SortingSortAttribute order(String order) {
    this.order = order;
    return this;
  }

   /**
   * Get order
   * @return order
  **/
  @ApiModelProperty(value = "")
  public String getOrder() {
    return order;
  }

  public void setOrder(String order) {
    this.order = order;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SortingSortAttribute sortingSortAttribute = (SortingSortAttribute) o;
    return Objects.equals(this.name, sortingSortAttribute.name) &&
        Objects.equals(this.sortType, sortingSortAttribute.sortType) &&
        Objects.equals(this.order, sortingSortAttribute.order);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, sortType, order);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SortingSortAttribute {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    sortType: ").append(toIndentedString(sortType)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

